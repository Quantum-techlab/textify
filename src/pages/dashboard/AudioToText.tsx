
import { useState, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Upload, Copy, Download } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

const AudioToText = () => {
  const [audio, setAudio] = useState<File | null>(null);
  const [audioUrl, setAudioUrl] = useState<string | null>(null);
  const [transcription, setTranscription] = useState("");
  const [isProcessing, setIsProcessing] = useState(false);
  const [progress, setProgress] = useState(0);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const selectedFile = e.target.files[0];
      setAudio(selectedFile);
      
      // Create an object URL for the audio preview
      const objectUrl = URL.createObjectURL(selectedFile);
      setAudioUrl(objectUrl);
      
      // Reset state
      setTranscription("");
      setProgress(0);
    }
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      const droppedFile = e.dataTransfer.files[0];
      
      // Validate if it's an audio file
      if (droppedFile.type.startsWith('audio/')) {
        setAudio(droppedFile);
        
        // Create an object URL for the audio preview
        const objectUrl = URL.createObjectURL(droppedFile);
        setAudioUrl(objectUrl);
        
        // Reset state
        setTranscription("");
        setProgress(0);
      } else {
        toast({
          variant: "destructive",
          title: "Invalid file type",
          description: "Please drop an audio file (MP3, WAV, etc.)",
        });
      }
    }
  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };

  const processAudio = async () => {
    if (!audio) return;
    
    setIsProcessing(true);
    setProgress(0);
    
    // Simulate audio processing with a progress timer
    // In a real app, you would use a speech-to-text API
    const simulateProcess = () => {
      let currentProgress = 0;
      const interval = setInterval(() => {
        currentProgress += 5;
        setProgress(currentProgress);
        
        if (currentProgress >= 100) {
          clearInterval(interval);
          setIsProcessing(false);
          
          // Mock transcription result - In a real app, this would come from the API
          setTranscription(
            "This is a simulated transcription of your audio file. In a production application, this would be generated by a speech-to-text API service using your uploaded audio file. The transcription quality would depend on the clarity of the audio and the capabilities of the service used."
          );
          
          toast({
            title: "Transcription complete",
            description: "Your audio has been successfully transcribed to text.",
          });
        }
      }, 100);
    };
    
    simulateProcess();
  };

  const handleCopyText = () => {
    navigator.clipboard.writeText(transcription);
    toast({
      title: "Text copied",
      description: "The transcription has been copied to your clipboard.",
    });
  };

  const handleDownloadText = () => {
    const element = document.createElement("a");
    const file = new Blob([transcription], { type: "text/plain" });
    element.href = URL.createObjectURL(file);
    element.download = "transcription.txt";
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  const handleUploadClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold">Audio to Text</h1>
        <p className="text-muted-foreground">Upload an audio file to convert speech to text.</p>
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Upload Card */}
        <Card>
          <CardHeader>
            <CardTitle>Upload Audio</CardTitle>
          </CardHeader>
          <CardContent>
            {/* Drag & Drop Area */}
            <div 
              className="border-2 border-dashed rounded-lg p-6 text-center cursor-pointer hover:bg-secondary/50 transition-colors"
              onDrop={handleDrop}
              onDragOver={handleDragOver}
              onClick={handleUploadClick}
            >
              <input
                type="file"
                ref={fileInputRef}
                onChange={handleFileChange}
                accept="audio/*"
                className="hidden"
              />
              
              {audioUrl ? (
                <div className="space-y-4">
                  <audio controls className="w-full">
                    <source src={audioUrl} type={audio?.type} />
                    Your browser does not support the audio element.
                  </audio>
                  <p className="text-sm text-muted-foreground">{audio?.name}</p>
                </div>
              ) : (
                <div className="space-y-4">
                  <div className="mx-auto w-12 h-12 rounded-full bg-secondary flex items-center justify-center">
                    <Upload size={24} className="text-muted-foreground" />
                  </div>
                  <div>
                    <p className="text-sm font-medium">Drag & drop an audio file or click to browse</p>
                    <p className="text-xs text-muted-foreground mt-1">Supports MP3, WAV, M4A (Max 10MB)</p>
                  </div>
                </div>
              )}
            </div>

            <div className="mt-4">
              <Label className="text-sm text-muted-foreground">
                Note: This is a demo feature. In a production app, this would use a service like Google Speech-to-Text, Amazon Transcribe, or OpenAI Whisper API.
              </Label>
            </div>
          </CardContent>
          <CardFooter>
            <Button 
              className="w-full" 
              onClick={processAudio} 
              disabled={!audio || isProcessing}
            >
              {isProcessing ? "Processing..." : "Transcribe Audio"}
            </Button>
          </CardFooter>
        </Card>
        
        {/* Results Card */}
        <Card>
          <CardHeader>
            <CardTitle>Transcription</CardTitle>
          </CardHeader>
          <CardContent>
            {isProcessing ? (
              <div className="space-y-4 py-8">
                <p className="text-center text-muted-foreground">Processing audio...</p>
                <Progress value={progress} className="h-2" />
                <p className="text-center text-sm">{progress}% complete</p>
              </div>
            ) : (
              <Textarea
                value={transcription}
                onChange={(e) => setTranscription(e.target.value)}
                placeholder="Transcription will appear here..."
                className="min-h-[200px]"
              />
            )}
          </CardContent>
          <CardFooter className="flex justify-between">
            <Button 
              variant="outline" 
              onClick={handleCopyText} 
              disabled={!transcription || isProcessing}
            >
              <Copy className="mr-2 h-4 w-4" />
              Copy
            </Button>
            <Button 
              variant="outline" 
              onClick={handleDownloadText} 
              disabled={!transcription || isProcessing}
            >
              <Download className="mr-2 h-4 w-4" />
              Download
            </Button>
          </CardFooter>
        </Card>
      </div>
    </div>
  );
};

export default AudioToText;
